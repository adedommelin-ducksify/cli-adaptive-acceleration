#! /usr/bin/env python

"""
Copyright 2019 Akamai Technologies, Inc. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
"""

"""
This code leverages akamai OPEN API. to control A2 push and preconnect policies
in Akamai Network. In case you need quick explanation contact the initiators.
Initiators: vzaytsev@akamai.com, cdaley@akamai.com, ehughes@akamai.com
"""

import sys
import os
import requests
import json
from akamai.edgegrid import EdgeGridAuth

bin_dir = os.path.dirname(os.path.join(os.getcwd(), __file__))
sys.path.append(os.path.normpath(os.path.join(bin_dir, '..', 'a2_cli')))
from config import EdgeGridConfig
from http_calls import reset

session = requests.Session()
verbose = False
section_name = "default"

# If all parameters are set already, use them.  Otherwise
# use the config
config = EdgeGridConfig({"verbose": False}, section_name)
verbose = getattr(config, "verbose", False)

# Set auth
session.auth = EdgeGridAuth(
    client_token=config.client_token,
    client_secret=config.client_secret,
    access_token=config.access_token
)

session.headers.update({'User-Agent': "AkamaiCLI"})

baseurl = '%s://%s/' % ('https', config.host)

def main():
    """ Processes the right command (list, get, set or delete) """
    if config.command == "reset":
        print("Reset policy for:", config.propertyId)
        return reset(session, baseurl, config.propertyId, verbose)
    else:
        config.parser.print_help(sys.stderr)
        return 1

# Final or common Successful exit
if __name__ == '__main__':
    try:
        status = main()
        exit(status)
    except KeyboardInterrupt:
        exit(1)